{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyD9boiLwoluf5KVsVoXnHOEXd66J2N6420\",\n  authDomain: \"e-commerce-website-654b8.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-website-654b8.firebaseio.com\",\n  projectId: \"e-commerce-website-654b8\",\n  storageBucket: \"e-commerce-website-654b8.appspot.com\",\n  messagingSenderId: \"542698267181\",\n  appId: \"1:542698267181:web:bbc10ff40317e0cbf70ea4\",\n  measurementId: \"G-P5XEVZWE7Z\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/User/Desktop/react/udemy/e-commerce-website/website/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","console","log","exists","displayName","email","createdAt","Date","set","err","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyD9boiLwoluf5KVsVoXnHOEXd66J2N6420\",\r\n    authDomain: \"e-commerce-website-654b8.firebaseapp.com\",\r\n    databaseURL: \"https://e-commerce-website-654b8.firebaseio.com\",\r\n    projectId: \"e-commerce-website-654b8\",\r\n    storageBucket: \"e-commerce-website-654b8.appspot.com\",\r\n    messagingSenderId: \"542698267181\",\r\n    appId: \"1:542698267181:web:bbc10ff40317e0cbf70ea4\",\r\n    measurementId: \"G-P5XEVZWE7Z\"\r\n};\r\n\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n\r\n    const snapShot = await userRef.get();\r\n\r\n    console.log(snapShot)\r\n\r\n    if (!snapShot.exists) {\r\n        const { displayName, email } = userAuth\r\n        const createdAt = new Date()\r\n\r\n        try {\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        } catch (err) {\r\n            console.log('error creating user', err.message)\r\n        }\r\n    }\r\n\r\n    return userRef\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n    return await batch.commit();\r\n}\r\n\r\nexport const convertCollectionSnapshotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n        const { title, items } = doc.data()\r\n\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items\r\n        }\r\n    })\r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection\r\n        return accumulator\r\n    }, {})\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n            unsubscribe()\r\n            resolve(userAuth)\r\n        }, reject)\r\n    })\r\n}\r\n\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()\r\n\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider()\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' })\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}